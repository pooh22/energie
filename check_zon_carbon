#!/bin/bash

PROG=$(basename $0)

sbfdata=$(mktemp)
iskradata=$(mktemp)

delete_tempfiles () {
   rm -f $sbfdata
   rm -f $iskradata
}

AWK=/usr/bin/awk
SED=/bin/sed
GREP=/bin/grep
BC=/usr/bin/bc
NC="/bin/nc -w 20" #timeout

X_OK=0
X_WARN=1
X_CRIT=2
X_UNKN=3

EXITSTATUS=""
MESSAGE=""
PERFDATA="|"

sunnyboy=192.168.9.57
rpi=192.168.9.28
carbon=192.168.9.60
carbonport=2003

DEBUG=0

#short term cache file:
DSMRCACHE=/tmp/cache.$PROG.iskra
SMACACHE=/tmp/cache.$PROG.sma
if [ $DEBUG = 1 ]; then
	DSMRCACHE=/tmp/testcache.$PROG.iskra
	SMACACHE=/tmp/testcache.$PROG.sma
fi

#keep track of origin of data used:
SMADATA_FROM_CACHE=0
DSMRDATA_FROM_CACHE=0

#logfiles
LOGISKRA=/var/log/energie/$(date "+%Y")/$(date "+%m")/iskra-$(date "+%Y%m%d").log
LOGSMA=/var/log/energie/$(date "+%Y")/$(date "+%m")/sma-$(date "+%Y%m%d").log

EPOCH=$(date "+%s")

#global array for DSMR data
declare -A DSMRDATA

#global array for previous DSMR data
declare -A DSMRDATAOLD

declare -A DSMRMAP=( \
    [timestamp]=0-0:1.0.0\
    [meter1]=1-0:1.8.1\
    [meter2]=1-0:1.8.2\
    [feedin1]=1-0:2.8.1\
    [feedin2]=1-0:2.8.2\
    [tariff]=0-0:96.14.0\
    [using]=1-0:1.7.0\
    [feeding]=1-0:2.7.0\
    [allpf]=0-0:96.7.21\
    [longpf]=0-0:96.7.9\
    [0-0:1.0.0]=timestamp\
    [1-0:1.8.1]=meter1\
    [1-0:1.8.2]=meter2\
    [1-0:2.8.1]=feedin1\
    [1-0:2.8.2]=feedin2\
    [0-0:96.14.0]=tariff\
    [1-0:1.7.0]=using\
    [1-0:2.7.0]=feeding\
    [0-0:96.7.21]=allpf\
    [0-0:96.7.9]=longpf\
)

#global array for SMA data
declare -A SMADATA

#global array for previous SMA data
declare -A SMADATAOLD

strip_unit () {
	local fullvalue="$1"
	local unit="$2"

	if ! grep -q -- "$unit" <<<"$fullvalue"
	then
		echo "Unit not found"
		return 1
	fi

	echo $fullvalue | tr '*' ' ' | sed 's/'"$unit"'//'
}

timestamp_to_epoch () {
	local ts=$1
	date -d "$(sed 's/\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)./\1-\2-\3 \4:\5:\6/' <<<"$ts")" +%s
}

#fill DSMRDATA or DSMRDATAOLD if second argument is "old"
dsmrfill () {
	local fn="$1"
	local old="$2"
	local fl=$(wc -l <$fn)

        if ! [ -r $fn ]; then
		echo "cannot read DSMRDATA $fn" 
		clean_exit $X_UNKN "permission problem?"
	fi

	if [ -n "$old" ] && [ "$old" = old ]; then
		: # ok
	else
		old=""
	fi

	if ! grep  --binary-files=text -q '^\![A-F0-9]' $fn
	then
		echo "incomplete input dsmrfill"
		return 1
	fi

	declare -A TMP

	for k in "${!DSMRMAP[@]}"
	do
		if [[ $k = [01]-[01]* ]]; then
			local value=$(grep  --binary-files=text "$k" $fn |tr '()' ' ' |awk '{print $2}' |sed -e 's/^00*//' -e 's/\*.*//')
			if [ -z "$value" ]; then
				value=NaN
			fi
			TMP[$k]=$value
			TMP[${DSMRMAP[$k]}]=$value
		fi
	done

	TMP[epoch]=$(timestamp_to_epoch ${TMP[timestamp]})

	if [ -z "$old" ]; then
		for k in "${!TMP[@]}"
		do
			DSMRDATA[$k]=${TMP[$k]}
		done
	else
		for k in "${!TMP[@]}"
		do
			DSMRDATAOLD["$k"]=${TMP["$k"]}
		done
	fi
}

read_dsmr () {
	local ip="$1"
	local port="$2"
	local cachetime="$3"
	local cachefile="$4"


	if [ -f $cachefile ]; then
		DSMRDATA_FROM_CACHE=1
		dsmrfill $cachefile
		cache_date=$(timestamp_to_epoch ${DSMRDATA[timestamp]})
		cache_age=$(( $EPOCH - $cache_date ))
	else
		cache_age=$(($cachetime +1))
	fi

	if [ $cache_age -gt $cachetime ]; then
		$NC $ip $port > $iskradata 2>/dev/null

		if dsmrfill $iskradata
		then
            DSMRDATA_FROM_CACHE=0
			cp -a $cachefile $cachefile.1
			cp $iskradata $cachefile
		else
			MESSAGE="$MESSAGE ISKRA data incomplete"
			clean_exit $X_UNKN "$MESSAGE$PERFDATA"
		fi
	fi

	if [ -f $cachefile.1 ]; then
		dsmrfill $cachefile.1 old
	fi
}



#fill SMADATA or SMADATAOLD if second argument is "old"
smafill () {
	local fn="$1"
	local old="$2"

        if ! [ -r $fn ]; then
		echo "cannot read SMADATA $fn" 
		clean_exit $X_UNKN "permission problem?"
	fi

	local fl=$(wc -l <$fn)

	if [ -n "$old" ] && [ "$old" = old ]; then
		: # ok
	else
		old=""
	fi

	if [ $fl -lt 10 ]; then
		echo "incomplete input smafill"
		return 1
	fi

	declare -A TMP
	TMP[device.status]=$($AWK '/Device Status/ {print $NF}' $fn)
	TMP[device.temperature]=$($AWK '/Device Temperature/ {print $NF}' $fn | $SED 's/.C$//' )
	TMP[prod.etoday]=$(strip_unit $($AWK '/EToday/ {print $NF}' $fn ) kWh )
	TMP[prod.etotal]=$(strip_unit $($AWK '/ETotal/ {print $NF}' $fn ) kWh )
	for spot in "String 1" "String 2"
	do
		safename=$(tr ' ' '_' <<<"$spot")
		TMP[spot.$safename.pdc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "kW$" ) {print $i} } }' $fn ) kW )
		TMP[spot.$safename.udc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "V$" ) {print $i} } }' $fn ) V )
		TMP[spot.$safename.idc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "A$" ) {print $i} } }' $fn ) A )
	done

	TMP[epoch]=$(stat --format "%Y" $fn)

	if [ -z "$old" ]; then
		for k in "${!TMP[@]}"
		do
			SMADATA[$k]=${TMP[$k]}
		done
	else
		for k in "${!TMP[@]}"
		do
			SMADATAOLD[$k]=${TMP[$k]}
		done
	fi
}

read_sma () {
	local ip="$1"
	local port="$2"
	local cachetime="$3"
	local cachefile="$4"

	if [ -f $cachefile ]; then
		cache_date=$(stat --format "%Y" $cachefile)
		cache_age=$(( $EPOCH - $cache_date ))
	else
		cache_age=$(($cachetime +1))
	fi

	if [ $cache_age -gt $cachetime ]; then
		$NC $ip $port > $sbfdata 2>/dev/null

		if smafill $sbfdata
		then
			cp -a $cachefile $cachefile.1
			cp $sbfdata $cachefile
		else
			MESSAGE="$MESSAGE SMA data incomplete"
			clean_exit $X_UNKN "$MESSAGE$PERFDATA"
		fi
	else
		smafill $cachefile
		SMADATA_FROM_CACHE=1
	fi

	if [ -f $cachefile.1 ]; then
		smafill $cachefile.1 old
	fi
}


clean_exit () {
    exitcode="$1"
    output="$2"

    echo "$output"
    delete_tempfiles
    exit $exitcode
}

log_and_send () {
    local source=$1
    local name=$2
    local value=$3

    if [ $source = "iskra" ]; then
        LOGFILE=$LOGISKRA
	if [ $DSMRDATA_FROM_CACHE = 1 ]; then
		#don't log old data
		return 0
	fi
    elif [ $source = sma ]; then
        LOGFILE=$LOGSMA
	if [ $SMADATA_FROM_CACHE = 1 ]; then
		#don't log old data
		return 0
	fi
    fi
    if ! [ -d $(dirname $LOGFILE) ]; then
        if ! mkdir -p $(dirname $LOGFILE)
	then
		return 1
	fi
    fi

    #echo energie.$source.$name $value $EPOCH | /usr/bin/tee -a $LOGFILE |
    #    $NC -c $carbon $carbonport
    if [ -w "$LOGFILE " ]
    then
        echo energie.$source.$name $value $EPOCH >> $LOGFILE
    else
	return 1
    fi
}

################################## main ##############################

#Get the data
read_sma $sunnyboy 7776 60 $SMACACHE

read_dsmr $rpi 7777 60 $DSMRCACHE

#send/log the data
for k in "${!SMADATA[@]}"
do
	log_and_send sma $k "${SMADATA[$k]}"
done

for k in "${!DSMRDATA[@]}"
do
	log_and_send iskra $k "${DSMRDATA[$k]}"
done

if [ -z "${DSMRDATAOLD[epoch]}" ]; then
        clean_exit $X_UNKN "no old data"
fi
#prepare icinga outputs

PERFDATA="${PERFDATA}devtemp=${SMADATA[device.temperature]} "
PERFDATA="${PERFDATA}etoday=${SMADATA[prod.etoday]} "

# testing....

#echo "========"
# delta waarden
#echo etoday.1 etoday tijd.1 tijd
#echo ${SMADATAOLD[prod.etoday]} ${SMADATA[prod.etoday]} ${SMADATAOLD[epoch]} ${SMADATA[epoch]}
delta_sma_period=$(( ${SMADATA[epoch]} - ${SMADATAOLD[epoch]} ))
delta_sma_production=$(echo "scale=4; ${SMADATA[prod.etoday]} - ${SMADATAOLD[prod.etoday]}" | bc ) #kWh
valid_sma_production=$( awk -vdp=$delta_sma_production ' BEGIN { if ( dp >= 0  && dp < 40 ) { print "true" } else { print "false" } }' ) 

if [ $valid_sma_production = true ]
then
	delta_sma_productionrate=$( echo " 3600000 * $delta_sma_production / $delta_sma_period" | bc ) # W
else
	clean_exit  $X_UNKN "$MESSAGE$PERFDATA"
fi

PERFDATA="${PERFDATA}sma_period=${delta_sma_period}s "
PERFDATA="${PERFDATA}prodnowP=$delta_sma_productionrate "

#echo delta sma prod = $delta_sma_productionrate "W"
#echo "========"
for spot in String_1 String_2
do
	spotpdc=$( echo "scale=0 ; 1000 *  ${SMADATA[spot.$spot.pdc]} " | bc )
#	echo "spot $spot Pdc = $spotpdc W"
	PERFDATA="${PERFDATA}${spot}P=$spotpdc "
done
#echo "========"
#echo "gebruik laatste periode (m1+m2) - (m1'+m2')"
delta_dsmr_period=$(( ${DSMRDATA[epoch]} - ${DSMRDATAOLD[epoch]} ))

#echo delta dsmr period = $delta_dsmr_period

PERFDATA="${PERFDATA}dsmr_period=${delta_dsmr_period}s "

delta_gebruik=$( echo " (${DSMRDATA[meter1]} + ${DSMRDATA[meter2]} ) - (${DSMRDATAOLD[meter1]} + ${DSMRDATAOLD[meter2]} )" | bc ) #kWh
if [ $DEBUG = 1 ]; then
	echo "delta_gebruik: $delta_gebruik = (${DSMRDATA[meter1]} + ${DSMRDATA[meter2]} ) - (${DSMRDATAOLD[meter1]} + ${DSMRDATAOLD[meter2]} ) kWh"
fi

if [ $( awk -vdg=$delta_gebruik 'BEGIN {if (dg > 10000 || dg < -10000) { print "toobig" } else { print "ok" } }') = toobig ]
then
	clean_exit $X_UNKN "delta_gebruik $$delta_gebruik too big"
fi

periode_gebruikrate=$( echo "scale=1; 3600000 * $delta_gebruik / $delta_dsmr_period" | bc )  # W
if [ $DEBUG = 1 ]; then
	echo "periode_gebruikrate: $periode_gebruikrate = 3600000 * $delta_gebruik / $delta_dsmr_period W"
fi
PERFDATA="${PERFDATA}dsmr_userate=$periode_gebruikrate "

#echo $delta_gebruik kWh per $delta_dsmr_period s
#echo gemiddeld $periode_gebruikrate W in de afgelopen $delta_dsmr_period s
#echo "========"
#echo "geleverd laatste periode (l1+l2) - (l1'+l2')" 
delta_geleverd=$( echo " (${DSMRDATA[feedin1]} + ${DSMRDATA[feedin2]} ) - (${DSMRDATAOLD[feedin1]} + ${DSMRDATAOLD[feedin2]} )" | bc ) #kWh
periode_geleverdrate=$( echo "scale=1; 3600000 * $delta_geleverd / $delta_dsmr_period" | bc )  # W

PERFDATA="${PERFDATA}dsmr_periodprodrate=$periode_geleverdrate "

#echo $delta_geleverd kWh per $delta_dsmr_period s
#echo gemiddeld $periode_geleverdrate W in de afgelopen $delta_dsmr_period s
#echo "========"
#echo echt gebruik... productie LP +  gebruik LP - geleverd LP
real_use_in_period=$( echo "scale=3; $delta_sma_productionrate + $periode_gebruikrate - $periode_geleverdrate" | bc)
#echo $real_use_in_period W

PERFDATA="${PERFDATA}corrected_userate=$real_use_in_period "

#echo "========"

if [ -n "${SMADATA[device.status]}" ] && [ "${SMADATA[device.status]}" = "Ok" ]
then
	EXITSTATUS=$X_OK
else
	MESSAGE="$MESSAGE Device status is $DEVSTATUS"
	EXITSTATUS=$X_CRIT
fi

if echo ${SMADATA[device.temperature]} |$GREP -q '^0\.0'
then
	MESSAGE="$MESSAGE OFFLINE"
fi

MESSAGE="$MESSAGE EToday=${SMADATA[prod.etoday]}kWh"

### output ###

clean_exit $EXITSTATUS "${MESSAGE}${PERFDATA}"

