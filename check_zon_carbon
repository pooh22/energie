#!/bin/bash

PROG=$(basename $0)

sbfdata=$(mktemp)
iskradata=$(mktemp)

delete_tempfiles () {
   rm -f $sbfdata
   rm -f $iskradata
}

AWK=/usr/bin/awk
SED=/bin/sed
GREP=/bin/grep
BC=/usr/bin/bc
NC=/bin/nc

X_OK=0
X_WARN=1
X_CRIT=2
X_UNKN=3

EXITSTATUS=""
MESSAGE=""
PERFDATA="|"

sunnyboy=192.168.9.57
rpi=192.168.9.28
carbon=192.168.9.60
carbonport=2003

#short term cache file:
DSMRCACHE=/tmp/cache.$PROG.iskra
SMACACHE=/tmp/cache.$PROG.sma

#keep track of origin of data used:
SMADATA_FROM_CACHE=0
DSMRDATA_FROM_CACHE=0

#logfiles
LOGISKRA=/var/log/energie/$(date "+%Y")/$(date "+%m")/iskra-$(date "+%Y%m%d").log
LOGSMA=/var/log/energie/$(date "+%Y")/$(date "+%m")/sma-$(date "+%Y%m%d").log

HHMM=$(date "+%H%M")
EPOCH=$(date "+%s")
DAGSEC=86400 #seconds

#global array for DSMR data
declare -A DSMRDATA

#global array for previous DSMR data
declare -A DSMRDATAOLD

declare -A DSMRMAP=( \
    [timestamp]=0-0:1.0.0\
    [meter1]=1-0:1.8.1\
    [meter2]=1-0:1.8.2\
    [feedin1]=1-0:2.8.1\
    [feedin2]=1-0:2.8.2\
    [tariff]=0-0:96.14.0\
    [using]=1-0:1.7.0\
    [feeding]=1-0:2.7.0\
    [allpf]=0-0:96.7.21\
    [longpf]=0-0:96.7.9\
    [0-0:1.0.0]=timestamp\
    [1-0:1.8.1]=meter1\
    [1-0:1.8.2]=meter2\
    [1-0:2.8.1]=feedin1\
    [1-0:2.8.2]=feedin2\
    [0-0:96.14.0]=tariff\
    [1-0:1.7.0]=using\
    [1-0:2.7.0]=feeding\
    [0-0:96.7.21]=allpf\
    [0-0:96.7.9]=longpf\
)

#global array for SMA data
declare -A SMADATA

#global array for previous SMA data
declare -A SMADATAOLD

strip_unit () {
	local fullvalue="$1"
	local unit="$2"

	if ! grep -q -- "$unit" <<<"$fullvalue"
	then
		echo "Unit not found"
		return 1
	fi

	echo $fullvalue | tr '*' ' ' | sed 's/'"$unit"'//'
}

timestamp_to_epoch () {
	local ts=$1
	date -d "$(sed 's/\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)./\1-\2-\3 \4:\5:\6/' <<<"$ts")" +%s
}

#fill DSMRDATA or DSMRDATAOLD if second argument is "old"
dsmrfill () {
	local fn="$1"
	local old="$2"
	local fl=$(wc -l <$fn)

	if [ -n "$old" ] && [ "$old" = old ]; then
		: # ok
	else
		old=""
	fi

	if ! grep  --binary-files=text -q '^\![A-F0-9]' $fn
	then
		return 1
	fi

	for k in "${!DSMRMAP[@]}"
	do
		if [[ $k = [01]-[01]* ]]; then
			local value=$(grep  --binary-files=text "$k" $fn |tr '()' ' ' |awk '{print $2}' |sed -e 's/^00*//' -e 's/\*.*//')
			if [ -z $value ]; then
				value=NaN
			fi
			if [ -z $old ]; then
				DSMRDATA[$k]=$value
				DSMRDATA[${DSMRMAP[$k]}]=$value
			elif [ "$old" = old ]; then
				DSMRDATAOLD[$k]=$value
				DSMRDATAOLD[${DSMRMAP[$k]}]=$value
			fi
		fi
	done
	if [ -z $old ]; then
		DSMRDATA[epoch]=$(timestamp_to_epoch ${DSMRDATA[timestamp]})
	elif [ "$old" = old ]; then
		DSMRDATAOLD[epoch]=$(timestamp_to_epoch ${DSMRDATA[timestamp]})
	fi
}

read_dsmr () {
	local ip="$1"
	local port="$2"
	local cachetime="$3"
	local cachefile="$4"


	if [ -f $cachefile ]; then
		dsmrfill $cachefile
		DSMRDATA_FROM_CACHE=1
		cache_date=$(timestamp_to_epoch ${DSMRDATA[timestamp]})
		cache_age=$(( $EPOCH - $cache_date ))
	else
		cache_age=$(($cachetime +1))
	fi

	if [ $cache_age -gt $cachetime ]; then
		$NC $ip $port > $iskradata 2>/dev/null

		if dsmrfill $iskradata
		then
			cp -a $cachefile $cachefile.1
			cp $iskradata $cachefile
		else
			MESSAGE="$MESSAGE ISKRA data incomplete"
			clean_exit $X_UNKN "$MESSAGE$PERFDATA"
		fi
	fi

	if [ -f $cachefile.1 ]; then
		dsmrfill $cachefile.1 old
	fi
}



#fill SMADATA or SMADATAOLD if second argument is "old"
smafill () {
	local fn="$1"
	local old="$2"
	local fl=$(wc -l <$fn)

	if [ -n "$old" ] && [ "$old" = old ]; then
		: # ok
	else
		old=""
	fi

	if [ $fl -lt 10 ]; then
		echo "incomplete input smafill"
		return 1
	fi

	if [ -z "$old" ]; then
		SMADATA[device.status]=$($AWK '/Device Status/ {print $NF}' $fn)
		SMADATA[device.temperature]=$($AWK '/Device Temperature/ {print $NF}' $fn | $SED 's/.C$//' )
		SMADATA[prod.etoday]=$(strip_unit $($AWK '/EToday/ {print $NF}' $fn ) kWh )
		SMADATA[prod.etotal]=$(strip_unit $($AWK '/ETotal/ {print $NF}' $fn ) kWh )
		for spot in "String 1" "String 2"
		do
			safename=$(tr ' ' '_' <<<"$spot")
			SMADATA[spot.$safename.pdc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "kW$" ) {print $i} } }' $fn ) kW )
			SMADATA[spot.$safename.udc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "V$" ) {print $i} } }' $fn ) V )
			SMADATA[spot.$safename.idc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "A$" ) {print $i} } }' $fn ) A )
		done
	else
		SMADATAOLD[device.status]=$($AWK '/Device Status/ {print $NF}' $fn)
		SMADATAOLD[device.temperature]=$($AWK '/Device Temperature/ {print $NF}' $fn | $SED 's/.C$//' )
		SMADATAOLD[prod.etoday]=$(strip_unit $($AWK '/EToday/ {print $NF}' $fn ) kWh )
		SMADATAOLD[prod.etotal]=$(strip_unit $($AWK '/ETotal/ {print $NF}' $fn ) kWh )
		for spot in "String 1" "String 2"
		do
			safename=$(tr ' ' '_' <<<"$spot")
			SMADATAOLD[spot.$safename.pdc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "kW$" ) {print $i} } }' $fn ) kW )
			SMADATAOLD[spot.$safename.udc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "V$" ) {print $i} } }' $fn ) V )
			SMADATAOLD[spot.$safename.idc]=$(strip_unit $( $AWK "/$spot Pdc/"' {for (i=2; i<= NF; i++) { if ( $i ~ "A$" ) {print $i} } }' $fn ) A )
		done
	fi
}

read_sma () {
	local ip="$1"
	local port="$2"
	local cachetime="$3"
	local cachefile="$4"


	if [ -f $cachefile ]; then
		cache_date=$(stat --format "%Y" $cachefile)
		cache_age=$(( $EPOCH - $cache_date ))
	else
		cache_age=$(($cachetime +1))
	fi

	if [ $cache_age -gt $cachetime ]; then
		$NC $ip $port > $sbfdata 2>/dev/null

		if smafill $sbfdata
		then
			cp -a $cachefile $cachefile.1
			cp $sbfdata $cachefile
		else
			MESSAGE="$MESSAGE SMA data incomplete"
			clean_exit $X_UNKN "$MESSAGE$PERFDATA"
		fi
	else
		smafill $cachefile
		SMADATA_FROM_CACHE=1
	fi

	if [ -f $cachefile.1 ]; then
		smafill $cachefile.1 old
	fi
}


clean_exit () {
    exitcode="$1"
    output="$2"

    echo "$output"
    delete_tempfiles
    exit $exitcode
}

log_and_send () {
    local source=$1
    local name=$2
    local value=$3

    if [ $source = "iskra" ]; then
        LOGFILE=$LOGISKRA
	if [ $DSMRDATA_FROM_CACHE = 1 ]; then
		#don't log old data
		return 0
	fi
    elif [ $source = sma ]; then
        LOGFILE=$LOGSMA
	if [ $SMADATA_FROM_CACHE = 1 ]; then
		#don't log old data
		return 0
	fi
    fi
    if ! [ -d $(dirname $LOGFILE) ]; then
        mkdir -p $(dirname $LOGFILE)
    fi

    #echo energie.$source.$name $value $EPOCH | /usr/bin/tee -a $LOGFILE |
    #    $NC -c $carbon $carbonport
    echo energie.$source.$name $value $EPOCH >> $LOGFILE
}

read_sma $sunnyboy 7776 60 $SMACACHE

read_dsmr $rpi 7777 60 $DSMRCACHE

if [ -n "${SMADATA[device.status]}" ] && [ "${SMADATA[device.status]}" = "Ok" ]
then
	EXITSTATUS=$X_OK
else
	MESSAGE="Device status is $DEVSTATUS"
	EXITSTATUS=$X_CRIT
fi

for k in "${!SMADATA[@]}"
do
	log_and_send sma $k "${SMADATA[$k]}"
done

for k in "${!DSMRDATA[@]}"
do
	log_and_send iskra $k "${DSMRDATA[$k]}"
done

PERFDATA="${PERFDATA}devtemp=${SMADATA[device.temperature]} "

#gridfreq blijft hier even staan, maar eigenlijk niet monitoren...

GRIDFREQ=$($AWK '/Grid Freq/ {print $NF}' $sbfdata | $SED 's/Hz$//' )

if [ -z ${SMADATA[prod.etoday]} ]; then
	MESSAGE="$MESSAGE prod.etoday undefined"
	clean_exit $X_UNKN "$MESSAGE$PERFDATA"
fi

PERFDATA="${PERFDATA}etoday=${SMADATA[prod.etoday]} "
PERFDATA="${PERFDATA}gridfreq=$GRIDFREQ "

if echo $GRIDFREQ |$GREP -q '^0\.00'
then
	MESSAGE="$MESSAGE OFFLINE"
fi

MESSAGE="$MESSAGE EToday=${SMADATA[prod.etoday]}kWh"

### proces iskra data ###

METER1=${DSMRDATA[meter1]}
METER2=${DSMRDATA[meter2]}
FEEDIN1=${DSMRDATA[feedin1]}
FEEDIN2=${DSMRDATA[feedin2]}
PRODTOTAL="${SMADATA[prod.etoday]}"

### opslaan/ophalen middernacht stand ###

NULSTANDFILE="/var/tmp/energie_nulstand.$USER"

if [ -f $NULSTANDFILE ]; then
	NSFMOD=$(stat -c %Y "$NULSTANDFILE")
else
	NSFMOD=0
fi

write_nulstand () {
	etotal=$1
	m1=$2
	m2=$3
	l1=$4
	l2=$5

	echo "etotal=$etotal" >$NULSTANDFILE
	echo "m1=$m1" >>$NULSTANDFILE
	echo "m2=$m2" >>$NULSTANDFILE
	echo "l1=$l1" >>$NULSTANDFILE
	echo "l2=$l2" >>$NULSTANDFILE
}

if (( $HHMM < 0060 )) || (( $EPOCH > ($NSFMOD+$DAGSEC) ))
then
	write_nulstand $PRODTOTAL $METER1 $METER2 $FEEDIN1 $FEEDIN2
	clean_exit $X_OK "${MESSAGE}${PERFDATA}"
elif [ $( cat $NULSTANDFILE |wc -l ) -eq 5 ]; then
	source $NULSTANDFILE
	# check values
	if [ -z $etotal ] || [ -z $m1 ]
	then
		write_nulstand $PRODTOTAL $METER1 $METER2 $FEEDIN1 $FEEDIN2
		clean_exit $X_UNKN "${MESSAGE}${PERFDATA}"
	fi

else
	write_nulstand $PRODTOTAL $METER1 $METER2 $FEEDIN1 $FEEDIN2
	clean_exit $X_UNKN "NULSTANDFILE broken ${MESSAGE}${PERFDATA}"
fi

### berekenen werkelijk gebruik ###
PRODTODAY=${SMADATA[prod.etoday]}

if [ -z $PRODTODAY ]
then
	clean_exit $X_UNKN "ERROR PRODTODAY undef"
fi
if [ -z $FEEDIN1 ]
then
	clean_exit $X_UNKN "ERROR FEEDIN1 undef"
fi
if [ -z $FEEDIN2 ]
then
	clean_exit $X_UNKN "ERROR FEEDIN2 undef"
fi
if [ -z $l1 ]
then
	clean_exit $X_UNKN "ERROR l1 undef"
fi
if [ -z $l2 ]
then
	clean_exit $X_UNKN "ERROR l2 undef"
fi
if [ -z $METER1 ]
then
	clean_exit $X_UNKN "ERROR METER1 undef"
fi
if [ -z $METER2 ]
then
	clean_exit $X_UNKN "ERROR METER2 undef"
fi
if [ -z $m1 ]
then
	clean_exit $X_UNKN "ERROR m1 undef"
fi
if [ -z $m2 ]
then
	clean_exit $X_UNKN "ERROR m2 undef"
fi

eigprodgebr=$( $BC <<<"scale=3; $PRODTODAY - ( ($FEEDIN1+$FEEDIN2) - ($l1+$l2) )" )
if [ -z $eigprodgebr ]
then
	clean_exit $X_UNKN "ERROR eigprodgebr undef"
fi
gebruik=$( $BC <<<"scale=3; ( ($METER1+$METER2) - ($m1+$m2) ) + $eigprodgebr" )

PERFDATA="${PERFDATA}gebruik=$gebruik eigprodgebr=$eigprodgebr "

### output ###

clean_exit $EXITSTATUS "${MESSAGE}${PERFDATA}"

